module TOKENS = struct
  type linenum = int
  type token = string

  let type_ (i, _j) = "TYPE  " ^ Int.to_string i
  let var (i, _j) = "VAR  " ^ Int.to_string i
  let function_ (i, _j) = "FUNCTION  " ^ Int.to_string i
  let break (i, _j) = "BREAK  " ^ Int.to_string i
  let of_ (i, _j) = "OF  " ^ Int.to_string i
  let end_ (i, _j) = "END  " ^ Int.to_string i
  let in_ (i, _j) = "IN  " ^ Int.to_string i
  let nil (i, _j) = "NIL  " ^ Int.to_string i
  let let_ (i, _j) = "LET  " ^ Int.to_string i
  let do_ (i, _j) = "DO  " ^ Int.to_string i
  let to_ (i, _j) = "TO  " ^ Int.to_string i
  let for_ (i, _j) = "FOR  " ^ Int.to_string i
  let while_ (i, _j) = "WHILE  " ^ Int.to_string i
  let else_ (i, _j) = "ELSE  " ^ Int.to_string i
  let then_ (i, _j) = "THEN  " ^ Int.to_string i
  let if_ (i, _j) = "IF  " ^ Int.to_string i
  let array (i, _j) = "ARRAY  " ^ Int.to_string i
  let assign (i, _j) = "ASSIGN  " ^ Int.to_string i
  let or_ (i, _j) = "OR  " ^ Int.to_string i
  let and_ (i, _j) = "AND  " ^ Int.to_string i
  let ge (i, _j) = "GE  " ^ Int.to_string i
  let gt (i, _j) = "GT  " ^ Int.to_string i
  let le (i, _j) = "LE  " ^ Int.to_string i
  let lt (i, _j) = "LT  " ^ Int.to_string i
  let neq (i, _j) = "NEQ  " ^ Int.to_string i
  let eq (i, _j) = "EQ  " ^ Int.to_string i
  let divide (i, _j) = "DIVIDE  " ^ Int.to_string i
  let times (i, _j) = "TIMES  " ^ Int.to_string i
  let minus (i, _j) = "MINUS  " ^ Int.to_string i
  let plus (i, _j) = "PLUS  " ^ Int.to_string i
  let dot (i, _j) = "DOT  " ^ Int.to_string i
  let rbrace (i, _j) = "RBRACE  " ^ Int.to_string i
  let lbrace (i, _j) = "LBRACE  " ^ Int.to_string i
  let rbrack (i, _j) = "RBRACK  " ^ Int.to_string i
  let lbrack (i, _j) = "LBRACK  " ^ Int.to_string i
  let rparen (i, _j) = "RPAREN  " ^ Int.to_string i
  let lparen (i, _j) = "LPAREN  " ^ Int.to_string i
  let semicolon (i, _j) = "SEMICOLON  " ^ Int.to_string i
  let colon (i, _j) = "COLON  " ^ Int.to_string i
  let comma (i, _j) = "COMMA  " ^ Int.to_string i
  let string s (i, _j) = "STRING(" ^ s ^ ")  " ^ Int.to_string i
  let int c (i, _j) = "INT(" ^ Int.to_string c ^ ")  " ^ Int.to_string i
  let id s (i, _j) = "ID(" ^ s ^ ")  " ^ Int.to_string i
  let eof = "EOF"
end
